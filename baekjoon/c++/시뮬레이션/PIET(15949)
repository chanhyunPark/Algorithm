#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<algorithm>
#include<string.h>

using namespace std;

typedef struct Piet
{
	int y;
	int x;
	int dp;
	int cc;
	vector<char> v;

public:
	Piet() {}
	Piet(int y, int x, int dp, int cc, vector<char> &v) : y(y), x(x), dp(dp), cc(cc), v(v) {}

};

int N, M; //1 <= >=100
char map[150][150];
bool visit[150][150];
int dir[4][2] = { { -1,0 },{ 1,0 },{ 0, -1 },{ 0, 1 } }; //위, 아래, 왼, 오
int ny, nx;
Piet s;
int timeFlag = 0; //4가 되고 ccFlag 2면 종결
int chDir[4][4] =
{
	{ -1, -1, 2, 3 },
{ -1, -1, 3, 2 },
{ -1, -1, 1, 0 },
{ -1, -1, 0, 1 }
};  //dp, cc에 따른 방향

bool cmpL(pair<int, int> n1, pair<int, int> n2)
{
	if (n1.second < n2.second)
		return true;

	return false;
}

bool cmpR(pair<int, int> n1, pair<int, int> n2)
{
	if (n1.second > n2.second)
		return true;

	return false;
}

bool cmpU(pair<int, int> n1, pair<int, int> n2)
{
	if (n1.first < n2.first)
		return true;

	return false;
}

bool cmpD(pair<int, int> n1, pair<int, int> n2)
{
	if (n1.first > n2.first)
		return true;

	return false;
}

int chgDir(int d)
{
	if (d == 0)
		return 3;
	else if (d == 1)
		return 2;
	else if (d == 2)
		return 0;
	else if (d == 3)
		return 1;
}

bool check(int dp, int cc)
{
	while (true)
	{
		if (timeFlag >= 4)
		{
			return false;
		}

		vector<pair<int, int>> v;
		
		if (s.dp == 0) //위부터
		{
			for (int n = 0; n < N; n++)
			{
				bool flag = false;
				for (int m = 0; m < M; m++)
				{
					if (visit[n][m])
					{
						v.push_back({ n,m });
						flag = true;
					}
				}

				if (flag)
					break;
			}

		}
		else if (s.dp == 1) //아래부터
		{
			for (int n = N - 1; n >= 0; n--)
			{
				bool flag = false;
				for (int m = 0; m < M; m++)
				{
					if (visit[n][m])
					{
						v.push_back({ n,m });
						flag = true;
					}
				}

				if (flag)
					break;
			}
		}
		else if (s.dp == 2) //왼쪽
		{
			for (int m = 0; m < M; m++)
			{
				bool flag = false;
				for (int n = 0; n < N; n++)
				{
					if (visit[n][m])
					{
						v.push_back({ n,m });
						flag = true;
					}
				}

				if (flag)
					break;
			}
		}
		else if (s.dp == 3) //오른쪽
		{
			for (int m = M - 1; m >= 0; m--)
			{
				bool flag = false;
				for (int n = 0; n < N; n++)
				{
					if (visit[n][m])
					{
						v.push_back({ n,m });
						flag = true;
					}
				}

				if (flag)
					break;
			}
		}


		int checkD = chDir[s.dp][s.cc];

		int dy = 0;
		int dx = 0;

		if (checkD == 0)
		{
			sort(v.begin(), v.end(), cmpU);

			dy = v[0].first + dir[s.dp][0];
			dx = v[0].second + dir[s.dp][1];

			if (dy < 0 || dx < 0 || dy >= N || dx >= M)
			{
				sort(v.begin(), v.end(), cmpD);

				if (s.cc == 2)
					s.cc = 3;
				else
					s.cc = 2;

				dy = v[0].first + dir[s.dp][0];
				dx = v[0].second + dir[s.dp][1];

				if (dy < 0 || dx < 0 || dy >= N || dx >= M)
				{
					int tmpD = chgDir(s.dp);
					s.dp = tmpD;
					timeFlag++;
					continue;
				}
				else
				{
					if (map[dy][dx] == 'X')
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						timeFlag = 0;
						s.v.push_back(map[dy][dx]);
						s.y = dy;
						s.x = dx;
						return true;
					}
				}
			}
			else
			{
				if (map[dy][dx] == 'X')
				{
					if (s.cc == 2)
						s.cc = 3;
					else
						s.cc = 2;

					sort(v.begin(), v.end(), cmpD);

					dy = v[0].first + dir[s.dp][0];
					dx = v[0].second + dir[s.dp][1];

					if (dy < 0 || dx < 0 || dy >= N || dx >= M)
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						if (map[dy][dx] == 'X')
						{
							int tmpD = chgDir(s.dp);
							s.dp = tmpD;
							timeFlag++;
							continue;
						}
						else
						{
							timeFlag = 0;
							s.v.push_back(map[dy][dx]);
							s.y = dy;
							s.x = dx;
							return true;
						}
					}
				}
				else
				{
					timeFlag = 0;
					s.v.push_back(map[dy][dx]);
					s.y = dy;
					s.x = dx;
					return true;
				}
			}
		}
		else if (checkD == 1)
		{
			sort(v.begin(), v.end(), cmpD);

			dy = v[0].first + dir[s.dp][0];
			dx = v[0].second + dir[s.dp][1];

			if (dy < 0 || dx < 0 || dy >= N || dx >= M)
			{
				sort(v.begin(), v.end(), cmpU);

				if (s.cc == 2)
					s.cc = 3;
				else
					s.cc = 2;

				dy = v[0].first + dir[s.dp][0];
				dx = v[0].second + dir[s.dp][1];

				if (dy < 0 || dx < 0 || dy >= N || dx >= M)
				{
					int tmpD = chgDir(s.dp);
					s.dp = tmpD;
					timeFlag++;
					continue;
				}
				else
				{
					if (map[dy][dx] == 'X')
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						timeFlag = 0;
						s.v.push_back(map[dy][dx]);
						s.y = dy;
						s.x = dx;
						return true;
					}
				}
			}
			else
			{
				if (map[dy][dx] == 'X')
				{
					sort(v.begin(), v.end(), cmpU);

					if (s.cc == 2)
						s.cc = 3;
					else
						s.cc = 2;

					dy = v[0].first + dir[s.dp][0];
					dx = v[0].second + dir[s.dp][1];

					if (dy < 0 || dx < 0 || dy >= N || dx >= M)
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						if (map[dy][dx] == 'X')
						{
							int tmpD = chgDir(s.dp);
							s.dp = tmpD;
							timeFlag++;
							continue;
						}
						else
						{
							timeFlag = 0;
							s.v.push_back(map[dy][dx]);
							s.y = dy;
							s.x = dx;
							return true;
						}
					}
				}
				else
				{
					timeFlag = 0;
					s.v.push_back(map[dy][dx]);
					s.y = dy;
					s.x = dx;
					return true;
				}
			}
		}
		else if (checkD == 2)
		{
			sort(v.begin(), v.end(), cmpL);

			dy = v[0].first + dir[s.dp][0];
			dx = v[0].second + dir[s.dp][1];

			if (dy < 0 || dx < 0 || dy >= N || dx >= M)
			{
				sort(v.begin(), v.end(), cmpR);

				if (s.cc == 2)
					s.cc = 3;
				else
					s.cc = 2;

				dy = v[0].first + dir[s.dp][0];
				dx = v[0].second + dir[s.dp][1];

				if (dy < 0 || dx < 0 || dy >= N || dx >= M)
				{
					int tmpD = chgDir(s.dp);
					s.dp = tmpD;
					timeFlag++;
					continue;
				}
				else
				{
					if (map[dy][dx] == 'X')
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						timeFlag = 0;
						s.v.push_back(map[dy][dx]);
						s.y = dy;
						s.x = dx;
						return true;
					}
				}
			}
			else
			{
				if (map[dy][dx] == 'X')
				{
					sort(v.begin(), v.end(), cmpR);

					if (s.cc == 2)
						s.cc = 3;
					else
						s.cc = 2;

					dy = v[0].first + dir[s.dp][0];
					dx = v[0].second + dir[s.dp][1];

					if (dy < 0 || dx < 0 || dy >= N || dx >= M)
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						if (map[dy][dx] == 'X')
						{
							int tmpD = chgDir(s.dp);
							s.dp = tmpD;
							timeFlag++;
							continue;
						}
						else
						{
							timeFlag = 0;
							s.v.push_back(map[dy][dx]);
							s.y = dy;
							s.x = dx;
							return true;
						}
					}
				}
				else
				{
					timeFlag = 0;
					s.v.push_back(map[dy][dx]);
					s.y = dy;
					s.x = dx;
					return true;
				}
			}
		}
		else if (checkD == 3)
		{
			sort(v.begin(), v.end(), cmpR);

			dy = v[0].first + dir[s.dp][0];
			dx = v[0].second + dir[s.dp][1];

			if (dy < 0 || dx < 0 || dy >= N || dx >= M)
			{
				sort(v.begin(), v.end(), cmpL);

				if (s.cc == 2)
					s.cc = 3;
				else
					s.cc = 2;

				dy = v[0].first + dir[s.dp][0];
				dx = v[0].second + dir[s.dp][1];

				if (dy < 0 || dx < 0 || dy >= N || dx >= M)
				{
					int tmpD = chgDir(s.dp);
					s.dp = tmpD;
					timeFlag++;
					continue;
				}
				else
				{
					if (map[dy][dx] == 'X')
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						timeFlag = 0;
						s.v.push_back(map[dy][dx]);
						s.y = dy;
						s.x = dx;
						return true;
					}
				}
			}
			else
			{
				if (map[dy][dx] == 'X')
				{
					sort(v.begin(), v.end(), cmpL);

					dy = v[0].first + dir[s.dp][0];
					dx = v[0].second + dir[s.dp][1];

					if (s.cc == 2)
						s.cc = 3;
					else
						s.cc = 2;

					if (dy < 0 || dx < 0 || dy >= N || dx >= M)
					{
						int tmpD = chgDir(s.dp);
						s.dp = tmpD;
						timeFlag++;
						continue;
					}
					else
					{
						if (map[dy][dx] == 'X')
						{
							int tmpD = chgDir(s.dp);
							s.dp = tmpD;
							timeFlag++;
							continue;
						}
						else
						{
							timeFlag = 0;
							s.v.push_back(map[dy][dx]);
							s.y = dy;
							s.x = dx;
							return true;
						}
					}
				}
				else
				{
					timeFlag = 0;
					s.v.push_back(map[dy][dx]);
					s.y = dy;
					s.x = dx;
					return true;
				}
			}
		}
	}
}


int main(void)
{

	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> N >> M;

	string str;
	for (int n = 0; n < N; n++)
	{
		cin >> map[n];
	}

	vector<char> v;
	s = Piet(0, 0, 3, 2, v);
	int ccFlag = 0; // 2가지 되면 전환
	s.v.push_back(map[0][0]);

	while (true)
	{
		char c = map[s.y][s.x];
		memset(visit, false, sizeof(visit));

		queue<pair<int, int>> q;

		q.push({ s.y,s.x });
		visit[s.y][s.x] = true;

		while (!q.empty()) //방문 처리
		{
			int y = q.front().first;
			int x = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++)
			{
				int ny = y + dir[i][0];
				int nx = x + dir[i][1];

				if (ny < 0 || nx < 0 || ny >= N || nx >= M)
					continue;

				if (visit[ny][nx])
					continue;

				if (map[ny][nx] == c && !visit[ny][nx])
				{
					q.push({ny,nx});
					visit[ny][nx] = true;
				}
			}
		}

		if (!check(s.dp, s.cc))
			break;
	}

	int size = s.v.size();
	for (int i = 0; i < size; i++)
		cout << s.v[i];


	return 0;
}